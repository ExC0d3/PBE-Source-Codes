SimpleSwitchMorph subclass: #LOCell	instanceVariableNames: 'mouseAction'	classVariableNames: ''	poolDictionaries: ''	category: 'PBE-LightsOut'!!LOCell methodsFor: 'initialization' stamp: 'AbhinavSharma 2/7/2017 01:19'!initialize	super initialize.	self label: ''.	self borderWidth: 2.	bounds := 0 @ 0 corner: 16 @ 16.	offColor := Color paleYellow.	onColor := Color paleBlue darker.	self useSquareCorners.	self turnOff! !!LOCell methodsFor: 'event handling' stamp: 'AbhinavSharma 2/7/2017 01:47'!mouseUp: anEvent	mouseAction value! !!LOCell methodsFor: 'accessing' stamp: 'AbhinavSharma 2/7/2017 01:50'!mouseAction: aBlock	^ mouseAction := aBlock! !BorderedMorph subclass: #LOGame	instanceVariableNames: 'cells'	classVariableNames: ''	poolDictionaries: ''	category: 'PBE-LightsOut'!!LOGame methodsFor: 'game logic' stamp: 'AbhinavSharma 2/7/2017 01:46'!toggleNeighboursOfCellAt: i at: j	i > 1		ifTrue: [ (cells at: i - 1 at: j) toggleState ].	i < self cellsPerSide		ifTrue: [ (cells at: i + 1 at: j) toggleState ].	j > 1		ifTrue: [ (cells at: i at: j - 1) toggleState ].	j < self cellsPerSide		ifTrue: [ (cells at: i at: j + 1) toggleState ]! !!LOGame methodsFor: 'initialization' stamp: 'AbhinavSharma 2/7/2017 01:39'!initialize		| sampleCell width height n |		super initialize.		n := self cellsPerSide.		sampleCell := LOCell new.		width := sampleCell width.		height := sampleCell height.		self bounds: (5 @ 5 extent: (width * n) @ (height * n) + (2 * self borderWidth)).		cells := Matrix new: n tabulate: [ :i :j | self newCellAt: i at: j ]! !!LOGame methodsFor: 'initialization' stamp: 'AbhinavSharma 2/7/2017 01:58'!newCellAt: i at: j	"Create a cell for position (i,j) and add it to my on-screen representation at the appropriate screen position. Answer the new cell"	| c origin |	c := LOCell new.	origin := self innerBounds origin.	self addMorph: c.	c position: ((i - 1) * c width) @ ((j - 1) * c height) + origin.	c mouseAction: [ self toggleNeighboursOfCellAt: i at: j ].		^ c! !